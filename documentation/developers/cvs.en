================
Working with CVS
================

:Authors:   Aaron Digulla, Adam Chodorowski 
:Copyright: Copyright © 1995-2002, The AROS Development Team
:Version:   $Revision$
:Date:      $Date$
:Status:    Done.

.. Contents::


Introduction
============

CVS is a version control tool which maintains a database of the files in a 
project. With CVS, it is possible to inspect and control the changes applied 
to any specific file: what changes were done and when, who did those changes,
what the purpose of some change was (as long as there is a log entry), 
possibly reverting bad changes made, merging changes from several different 
people and much more. 

In essence, it makes it *much* easier for a group of people to collaborate on
a common project by allowing everyone to know what is happening to the files,
making sure that people do not trash each others changes by mistake and 
providing the means to do this over the Internet. Naturally, we use it to 
collaborate on AROS.

The server maintains a central "repository", which is the main database 
containing the published common codebase of the project. Individual developers 
have their own "working copies", which are local copies of the database from
a specific time together with local changes that the developer hasn't uploaded
to the server. When an developer wants to share his changes with the rest of 
the team he simply "commits" his changes to the server using the client 
program, which takes care of uploading them and merging them with changes done
by other developers.


The software
============

UNIX
----

If you are running Linux, FreeBSD or any other modern UNIX clone then you 
simply need to install the official CVS software, version 1.9 or higher, for 
your OS. All common Linux distributions come with CVS packaged.

.. Note:: Versions between 1.9.16 and 1.10 don't work because the login 
          protocol was changed. Versions higher and including 1.10 work
          fine. It is recommended to update to the latest version of CVS
          anyway, so this should not be a problem.


AmigaOS
-------

If you are running AmigaOS, you will need a TCP/IP stack and some CVS port
installed. There are several CVS ports for AmigaOS, but the one that is most
up to date and easiest to set up is AmCVS__ by Olaf Barthel and Jens Langner.
It is totally self contained and does not require ixemul.library or a separate 
RCS program.

__ http://amcvs.light-speed.de/


Logging into the server
=======================

Before issuing most CVS commands, you need to login to the server which you do 
with the "login" command. Login to the AROS CVS server with::
    
    > cvs -d :pserver:<user>@cvs.aros.org:/home/cvs/aros login

Replace "<user>" with your username. You should be asked for your password, and 
after typing it it you now connected (providing there was no error ofcourse). 
You only need to login once, as CVS will remember your password and use it when 
you access the same repository next time.

.. Tip:: You can save some typing by storing the argument to the "-d" option in 
         the environment variable "CVSROOT" with the following command line if
         you are running AmigaOS or csh under UNIX::

             > setenv CVSROOT :pserver:<user>@cvs.aros.org:/home/cvs/aros
    
         If you are running a bourne or korn compatible shell::

             > export CVSROOT=:pserver:<user>@cvs.aros.org:/home/cvs/aros

         Don't forget to replace <user> with your username. If you haven't set 
         this variable, you must add the "-d [...]" option right after "cvs" in 
         the following examples.

Now you can use the other CVS commands to check out a copy of all of the AROS 
sources, update your working copy or commit the changes you have made, as is 
outlined in the next sections.

.. Note:: 

    The AROS repository is running on a password protected CVS server, which
    means that you need to `apply for access to it`__ to be able to collaborate
    in the development. At the request of Amiga Inc., anonymous read-only access
    to the repository has been disabled.
          
__ contribute#joining-the-team


Getting the AROS sources
========================

To get a copy of the AROS sources you use the "checkout" command, like this::

    > cvs checkout AROS

This will create a directory called AROS and populate it with all the sources,
which might take quite some time if you have a slow network connection. If you
wish to compile the native i386-pc port, you also need to check out the 
"necessary" module from "contrib"::

    > cd AROS
    > cvs checkout necessary

.. Tip:: 

    After the checkout, CVS will remember where the source came from. You don't
    have to set the CVSROOT variable or specify the "-d" option to CVS when you
    use it from inside any directory created by CVS.


Getting the extra sources
=========================

Apart from the AROS main sources which we checked out in the previous section,
there is also other things on the CVS server not directly related to the core
of the operating system. For example, this includes the "contrib" module with
third party programs that have been ported to AROS, the "binaries" module which
contains images like screenshots, backdrops and similar, and the "docs" module
which contains the sources to the website. The contrib module is further 
divided up into smaller modules, so you don't have to check it all out if you
only want a specific program.

You can get a list of the available modules with::

    > cvs checkout -c

To checkout one of the modules, simply run "cvs checkout <module>" somewhere in 
the AROS tree. You could check it out outside the main AROS tree, but then the
build process would not find it automatically. For example, you can check out
the Quake port with::

    > cvs checkout Quake

This will create the directory "contrib/Games/Quake" and populate it with the 
Quake sources. 

.. Note:: 

    If you later run "cvs update -dP" in the "Games" directory, you will not get
    the other games available but only update the Quake sources. This is because
    you specifically told CVS that you only wanted Quake, so it will ignore the
    other ones. To get all the other games, you need to check them out
    explicitly::

        > cvs checkout Games


Updating the sources
====================

After having checked out the sources, you might want to periodically update 
them to get the latest changes the other developers have commited. For this
you use the "update" command::

    > cd AROS
    > cvs update -dP
    
This will merge any changes that other developers have made into your sources 
and also check out new directories and files that have been added. If someone
commited changes to a file that you also have changed locally, CVS will try 
to merge the changes automatically. If both of you changed the same lines CVS
might fail in merging the sources. When this happens, CVS will complain and put
**both** versions in the file separated by ``>>>>``. You need to edit the file
and resolve the conflict manually.

.. Warning:: 

    Just because CVS successfully merged the other developers changes with your
    doesn't mean everything is fine. CVS only cares about the *textual* content;
    there could still be *logical* conflicts after the merge (eg. the other
    developer might have changed the semantics of some function that you use in
    your changes). You should always inspect files that were merged and see if
    it still makes sense.


Committing changes
==================

If you have made some changes and feel that you want to share your work with 
the other developers, you should use the "commit" command::

    > cvs commit

You can specify a list of files to commit; otherwise CVS will recurse down from 
the current directory and find all files you have changed and commit them. 
Before sending your changes to the server for incorporation, CVS will ask you 
to input a log message. This log message should contain a brief description of
what you have changed and in certain cases a rationale for them. Well written 
log messages are very important, since they make it much easier for the other 
developers quickly can see what you have done and perhaps why. The log messages
are collected and then sent in a daily mail to the development mailing list so
everyone can keep up with developments to the code base.

Before commiting your changes in a directory, you should first do an update
there to see if anyone else has changed the files in the meantime you've been
working on them. In case that happens, you need to resolve any problems before
commiting. Also please make sure you have tested your changes before commiting
them; atleast so that they do not break the build.


Adding new files and directories
================================

To add new files and directories to the repository, use the "add" command::

    > cvs add file.c
    > cvs add dir

CVS will not automatically recurse into newly added directories and add the 
contents; you have to do that yourself. After having added the file, you need
to use the "commit" command to actually add them to the repository. 


Importing
=========

When you want to add a larger collection of files, eg. the source code of some
existing software, "cvs add" quickly becomes tiresome. For this you should use 
the "cvs import" command. Unfortunately, the section about the import command 
in the CVS manual is quite poorly written, so an example is in order:

1. Put the files and directories you want to import wherever you like, as long
   as it is **not** inside your working copy. Running the "import" command on
   a directory situated inside an existing CVS working copy can lead to very
   strange results, so it's best to avoid that.

2. Change to the directory containing the files you wish to import::

       > cd name-1.2.3

3. Import the files with the "cvs import" command::

       > cvs -d :pserver:<user>@cvs.aros.org:/home/cvs/aros
       \ import -m <logMessage> <destinationPath> <VENDOR> <NAME_1_2_3>

   This will recursively import all files from the current directory and below
   into the repository, into the destination path and with the log message 
   you've specified. Actually, not *all* files will be added: CVS will ignore
   filenames that are common for backup and hidden files, like ``#?.bak``,
   ``.#?`` and ``#?~``. You can use the "-I" option to tell CVS to ignore more
   file patterns. Whatever you replace "<VENDOR>" and "<NAME_1_2_3>" with is 
   called the "vendor tag" and "release tag" respectively. The vendor tag 
   should give a hint where this package comes from, and the release tag is a 
   symbolic name for the name and version of the package that was imported.
   
   For example, say that you wanted to import the CVS 1.11.12 sources into 
   the "contrib/development/versioning/cvs" directory::

      > cd cvs-1.11.12
      > cvs -d:pserver:<user>@cvs.aros.org:/home/cvs/aros 
      \ import -m "Initial import of CVS 1.11.12" 
      \ contrib/development/versioning/cvs GNU CVS_1_11_12

   
Configuration file
==================

To save some typing you can put all the common options you always use in the
configuration file ".cvsrc" in your home directory. For example::

    cvs -z3
    update -dP
    diff -u

The first line tells CVS to always compress the communication between the
client and the server. The next line tells CVS to delete empty directories and 
create new ones when updating. The last line tells CVS to use the "unified" 
diff output format when running "cvs diff".


Further reading
===============

More detailed information about CVS can ofcourse be found in the manual pages
and info files distributed with CVS itself, and there are also numerous sites
containing useful tutorials and guides which might be more easy to read.
The following pages are highly recommended:

+ `The CVS Book`_
+ `CVS Bubbles`_
+ `CVS Home`_

.. _`The CVS Book`: http://cvsbook.red-bean.com/
.. _`CVS Bubbles`:  http://www.loria.fr/~molli/cvs-index.html
.. _`CVS Home`:     http://www.cvshome.org/

