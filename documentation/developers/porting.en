=============
PORTING GUIDE
=============

:Authors:   SpotUP, HNL_DK, NICOMEN, ITIX, ZEROHERO, BLACKY_STARDUST, Matthias Rustler
:Copyright: Copyright © 2006, The AROS Development Team
:Version:   $Revision$
:Date:      $Date$
:Status:    Unfinished
:ToDo:      Some real world examples


.. Contents::


Introduction
============

This guide is about porting of software which comes with configure or make scripts to AROS.
This is true for the most open source software from the Linux world. It is based on a
`document <http://utilitybase.com/article?action=show&id=210>`_
which was written by Johan Samuellson for AmigaOS4. 


Quick reference 
===============

For lazy geezers like me, I use these lines a lot and I don't want to 
wade through the guide to find them all the time, if you are new to this 
guide, just skip this chapter for now::

    ./configure CC=i386-aros-gcc CFLAGS=-nix \
    --prefix=/progdir \
    --build=local --host=i686-aros --target=i686-aros \
    --disable-nls --without-x --without-pic --disable-shared
    

What to port?
=============

* The best supported programming language is C. C++ lacks some features.

* Look what additional packages are required for the software you want to port.
  You cannot simply port when GUI toolkits like GTK or QT are required.
  Only software which runs under a console can be ported directly.

* When you want to port games, look if they use `libSDL <http://www.libsdl.org>`_.
  But avoid software which requires OpenGL.


Getting the SDK up to date
==========================

The most easy way to port to AROS is from a Linux box, because it
usually has all the needed development tools. Look in the `Development Guide`__
for some information on how about to install the SDK.

__ app-dev/introduction.php#compiling-on-linux-with-gcc


The basics
==========

The first thing you do is to check how to build your project.
If there is a file called *configure* in the root directory of the archive,
it means you'll have to configure it for your platform.
Start a terminal, and configure. See the next chapter for a description
on how to do that.

After the project is properly configured it's time to roll out the compiler. 
Start building your project by typing ``make``. 

However, if there was no file called *configure*, look for a file called  
*Makefile*. Edit it to suit AROS and build the project with ``make``.

If everything compiled and linked you are ready to test your port. A very common
problem is that it won't find its datafiles, and crash. Fix the paths as 
described in the path-fixing chapter, and try to run it again. 

Type ``make install`` in order to copy all needed files to the right places.

OK, you're done now, upload it to http://archives.aros-exec.org and aminet!


How to configure
================

What makes configuring for AROS more difficult than e.g. for AmigaOS4 is the fact that
we are using a cross compiler.

You can type ``./configure --help`` to see what options are available. If configuring fails
we can try to disable some features.

Here is an explanation of the options we have used in the `Quick reference`_ above.

CC=i386-aros-gcc
    We want to use the AROS compiler. Otherwise we'd get a Linux binary.

CFLAGS="-nix"
    This enables Linux semantics for paths. Linux applications often use absolute paths to
    their data files. But an absolute Linux path like /usr/local/app means for AROS: go one
    level up, then go into the *usr* directory.

--prefix=/progdir/
    Prefixes all paths with */progdir/*. Together with the *-nix* option this allows to use
    Linux paths during compiling and AROS paths during running.

--build=local --host=i686-aros --target=i686-aros
    Tells the configure script to cross-compile to i686-aros.

--disable-nls --without-x --without-pic --disable-shared
    Disables some features which aren't supported by AROS.


Common errors that can occur when configuring
=============================================

I get errors like target or host i686-aros isn't available.

Solution;
  The *config.sub* script is probably old or doesn't exist, download autoconf_ and copy the file
  *config.sub* into the root directory of your package.

.. _autoconf: http://ftp.gnu.org/gnu/autoconf/

I get errors like this:
  checking for IMG_Load in -lSDL_image... no

Solution:
  We are linking with static libraries, and we need to be tell exactly what
  to link in. Locate this line in the configure script::

    LIBS="-lSDL_image $LIBS"

  SDL_image depends on some more libraries to function correctly,
  add them like this::

    LIBS="-lSDL_image -lpng -ljpeg -lz $LIBS"


I get errors like this:
  checking for Mix_OpenAudio in -lSDL_mixer... no

Solution:
  We are linking with static libraries, and we need to tell exactly what
  to link in. Locate this line in the configure script::

    LIBS="-lSDL_mixer $LIBS"

  SDL_mixer depends on some more libraries to function correctly,
  add them like this::

    LIBS="-lSDL_mixer -lvorbisfile -lvorbis -logg $LIBS"


The same thing also often happens when configure is searching for 
SDL_ttf, and you know why by now. We need to specify some more libs that 
SDL_ttf depends on. It needs -lfreetype and -lz. I will leave the 
rest to you as an exercise.

If you have added the needed dependencies to the configure script, and 
it still doesn't work it can be due missing files in the SDK. E.g. the
SDL libs aren't included. 

If it still doesn't work, and you are sure that you have the library
installed, try to remove the whole section where it checks 
for the failing library in the configure file.
This is not recommended, but if there is no other way...

Now you should be ready to build your project. When porting unix apps 
always type ``make``.



Converting unix paths to AROS paths
===================================

How do I convert UNIX paths into AROS paths? Exchange *getenv("HOME");* by *"/PROGDIR/"*

Examples::

    old: strcpy(path, getenv("HOME"));
    new: strcpy(path, "/PROGDIR/");

    old: strcpy(home,getenv("HOME"));
    new: strcpy(home,"/PROGDIR/");

    old: sprintf(rc_dir, "%s/.gngeo/romrc.d", getenv("HOME"));
    new: sprintf(rc_dir, "%sgngeo/romrc.d", "/PROGDIR/");

Notice that I removed "/." in the last example.

Paths to datadirs are often set during the configure process by issuing 
*-DDATADIR=* if this is the case set it to *-DDATADIR=/PROGDIR/*
It's also common that the datadir are set in the makefiles. Locate *DATADIR=*
and change it to *DATADIR=/PROGDIR/*


Defines
=======

Defines are often set in *config.h*, if something is configured wrongly, you can
often change it here by using *#define* and *#undef*.

A define example that considers all AmigaOS flavours::

  #ifdef __AMIGA__
	  blah blah blah
  #else 
          blah blah blah
  #endif

A define example that only considers AROS::

  #ifdef __AROS__
	  blah blah blah
  #else 
          blah blah blah
  #endif

A define example, that considers BeOS and AROS::

  #if !defined(__BEOS__) && !defined(__AROS__)

An example of a more complex #ifdef::

  #ifdef GP2X
	char *gngeo_dir="save/";
  #elif defined __AROS__
	char *gngeo_dir="/PROGDIR/save/";
  #else
	char *gngeo_dir=get_gngeo_dir();
  #endif

Some open source packages are already adopted to Amiga-like operating systems.
If you find something like *#ifdef __AMIGA__* in the source you can try to add
the define to the config options (e.g. CFLAGS="-nix -D__AMIGA__").


Understanding error messages
============================

Error: No return statement in function returning non-void 
  There is no *return* in a function that needs a return.

Error: Control reaches end of non-void function
  It is reaching the end of a function that needs to return a value, but there is no return.

Error: May be used uninitialized in this function
  The variable is not initialized. 

Warning: implicit declaration of function 'blah blah'
  You need to include a header.


Common errors
=============

warning: incompatible implicit declaration of built-in function 'exit';
warning: incompatible implicit declaration of built-in function 'abort'::
  
    solution: #include <stdlib.h>

warning: implicit declaration of function 'strlen';
warning: incompatible implicit declaration of built-in function 'strlen'::

    solution: #include <string.h>

warning: implicit declaration of function 'memcpy';
warning: incompatible implicit declaration of built-in function 'memcpy'::

    solution: #include <string.h>

error: memory.h: No such file or directory::

    solution: #include <string.h>

error: malloc.h: No such file or directory::

    solution: #include <stdlib.h>

warning: incompatible implicit declaration of built-in function 'printf'::

    solution: #include <stdio.h>

warning: implicit declaration of function 'MyRemove'::

    solution: #define MyRemove Remove


Tips and tricks
===============

How do I search for text strings using GREP?

::

  grep -R "I am looking for this" *

How do I make a DIFF file with my changes?

::

  diff originalfile.c mychangedfile.c >./originalfile.patch

My executeable is crashing, how do I debug it?
  Look in `Debugging manual <debugging>`_. You can use sys:utilities/snoopy to find out
  what your application tries to do.

How do I redirect GCC warnings and errors to a text file?

::

  make 2>warnings.txt



Creating a makefile by hand
===========================

This makefile could be used if the build system is a mess and you want to
simplify it a bit, alter it to fit your needs.
Usually you only need to modify an existing makefile, change the name of the C compiler
(otherwise it would create binaries for Linux) and add some linklibraries.

Here's an explanation of what the flags do.
 
CC
    The name of the C compiler executeable.

RM
    The name of the delete command.

STRIP
    The name of the strip command (used to remove debug data from exe files).

CFLAGS
    Tells the compiler where to find the includes (-I) etc.

LDFLAGS
    Tells the linker what libraries to include (-l) and were
    to find them (-L). 

OBJS
    The compiler (GCC/G++) compiles object files (#?.o) from your .c
    files that are later linked together to become an executable file.
    Specify the object file names here.

OUTPUT
    The name of the final executable file.

::

  CC      = i386-aros-gcc
  RM      = rm
  STRIP   = i386-aros-strip --strip-unneeded --remove-section .comment
  CFLAGS  = -Wall -O2 
  LDFLAGS = -nix -lsmpeg -lSDL_gfx -lSDL_net -lSDL_image -lpng -ljpeg -lz -lSDL_mixer \
            -lvorbisfile -lvorbis -logg -lSDL_ttf -lfreetype -lz -lsdl -lauto -lpthread -lm
  OBJS    = a.o b.o c.o
  OUTPUT  = test.exe

  all: $(OBJS)
          $(CC) $(CFLAGS) $(LDFLAGS) $(OBJS) -o $(OUTPUT) 

  main.o: main.cpp main.h 
          $(CC) $(CFLAGS) -c main.cpp

  strip:
          $(STRIP) $(OUTPUT)
        
  clean:
          $(RM) -f $(OBJS) $(OUTPUT)

Remember that you have to use tabulator chars before the command.


Using the build system
======================

The build system contains some scripts for configuring of packages. The big advantage
when using the build system is that you can easily port to different AROS flavours.

+ %build_with_configure
+ %fetch_and_build
+ %fetch_and_build_gnu_development

Look in the file $(TOP)/config/make.tmpl for an explanation of the arguments.
