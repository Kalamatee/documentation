=============
hidd.pci_hidd
=============

.. This document is automatically generated. Don't edit it!

`Index <index>`_

----------

Classes
-------

+ `CLID_Hidd_PCIDevice`_
+ `CLID_Hidd_PCIDriver`_

----------

CLID_Hidd_PCIDevice
-------------------

========================================== ========================================== ========================================== ========================================== 
`aoHidd_PCIDevice_Owner`_                  `moHidd_PCIDevice_Obtain`_                 `moHidd_PCIDevice_Release`_                `moHidd_PCIDevice_RemoveInterrupt`_        
`moHidd_PCIDriver_AddInterrupt`_           
========================================== ========================================== ========================================== ========================================== 

-----------

aoHidd_PCIDevice_Owner
======================

Synopsis
~~~~~~~~
::

     [..G], APTR


Function
~~~~~~~~
::

     Returns name of current device's owner or NULL if the device is
     not owned by anyone.


Notes
~~~~~
::

     This attribute is provided for diagnostics utilities like PCITool.
     There is no need to check current owner before attempting to own
     the device. moHidd_PCIDevice_Obtain method performs this check
     and owns the device atomically.



----------

moHidd_PCIDevice_Obtain
=======================

Synopsis
~~~~~~~~
::

     OOP_Object *OOP_DoMethod(OOP_Object *obj, struct pHidd_PCIDevice_Obtain *Msg);

     OOP_Object *HIDD_PCIDevice_Obtain(OOP_Object *obj, CONST_STRPTR owner);


Function
~~~~~~~~
::

     Lock the device for exclusive use.


Inputs
~~~~~~
::

     obj   - Pointer to the device object.
     owner - A string identifying the owner.


Result
~~~~~~
::

     NULL on success or string identifying current owner.



See also
~~~~~~~~

`moHidd_PCIDevice_Release`_ 

----------

moHidd_PCIDevice_Release
========================

Synopsis
~~~~~~~~
::

     OOP_Object *OOP_DoMethod(OOP_Object *obj, struct pHidd_PCIDevice_Release *Msg);

     OOP_Object *HIDD_PCIDevice_Release(OOP_Object *obj);


Function
~~~~~~~~
::

     Release ownership of the device.


Inputs
~~~~~~
::

     obj - Pointer to the device object.


Result
~~~~~~
::

     None.


Notes
~~~~~
::

     You should call this function only on devices owned by you. Doing
     this on someone else's devices will not do any good things.



See also
~~~~~~~~

`moHidd_PCIDevice_Obtain`_ 

----------

moHidd_PCIDevice_RemoveInterrupt
================================

Synopsis
~~~~~~~~
::

     OOP_Object *OOP_DoMethod(OOP_Object *obj, struct pHidd_PCIDevice_RemoveInterrupt *Msg);

     OOP_Object *HIDD_PCIDevice_RemoveInterrupt(OOP_Object *obj, OOP_Object *device,
                                                struct Interrupt *interrupt);


Function
~~~~~~~~
::

     Remove interrupt handler from the device.


Inputs
~~~~~~
::

     obj       - Pointer to the device object.
     interrupt - Interrupt structure to remove.


Result
~~~~~~
::

     None.



See also
~~~~~~~~

`moHidd_PCIDevice_AddInterrupt`_ 

----------

moHidd_PCIDriver_AddInterrupt
=============================

Synopsis
~~~~~~~~
::

     OOP_Object *OOP_DoMethod(OOP_Object *obj, struct pHidd_PCIDevice_AddInterrupt *Msg);

     OOP_Object *HIDD_PCIDriver_AddInterrupt(OOP_Object *obj, OOP_Object *device,
                                             struct Interrupt *interrupt);


Function
~~~~~~~~
::

     Add interrupt handler for the device.


Inputs
~~~~~~
::

     obj       - Pointer to device object.
     interrupt - Interrupt structure to add.


Result
~~~~~~
::

     TRUE it succesful or FALSE on failure.



See also
~~~~~~~~

`moHidd_PCIDevice_RemoveInterrupt`_ 

CLID_Hidd_PCIDriver
-------------------

========================================== ========================================== ========================================== ========================================== 
`moHidd_PCIDriver_AddInterrupt`_           `moHidd_PCIDriver_RemoveInterrupt`_        
========================================== ========================================== ========================================== ========================================== 

-----------

moHidd_PCIDriver_AddInterrupt
=============================

Synopsis
~~~~~~~~
::

     OOP_Object *OOP_DoMethod(OOP_Object *obj, struct pHidd_PCIDriver_AddInterrupt *Msg);

     OOP_Object *HIDD_PCIDriver_AddInterrupt(OOP_Object *obj, OOP_Object *device,
                                             struct Interrupt *interrupt);


Function
~~~~~~~~
::

     Add interrupt handler for the specified device.

     This method is present in order to provide abstraction for
     different PCI implementations. Default implementation of
     this method assumes 1:1 mapping between system interrupts
     and PCI interrupts. However, on some machines this is not
     true (an example is Amiga(tm) bridgeboards). In this case
     you will have to provide alternate implementation of this
     method.


Inputs
~~~~~~
::

     obj       - Pointer to your driver object.
     device    - A pointer to the device object.
     interrupt - Interrupt structure to add.


Result
~~~~~~
::

     TRUE it succesful or FALSE on failure.



See also
~~~~~~~~

`moHidd_PCIDriver_RemoveInterrupt`_ 

----------

moHidd_PCIDriver_RemoveInterrupt
================================

Synopsis
~~~~~~~~
::

     OOP_Object *OOP_DoMethod(OOP_Object *obj, struct pHidd_PCIDriver_RemoveInterrupt *Msg);

     OOP_Object *HIDD_PCIDriver_RemoveInterrupt(OOP_Object *obj, OOP_Object *device,
                                                struct Interrupt *interrupt);


Function
~~~~~~~~
::

     Remove interrupt handler from the specified device.

     This method is present in order to provide abstraction for
     different PCI implementations. Default implementation of
     this method assumes 1:1 mapping between system interrupts
     and PCI interrupts. However, on some machines this is not
     true (an example is Amiga(tm) bridgeboards). In this case
     you will have to provide alternate implementation of this
     method.


Inputs
~~~~~~
::

     obj       - Pointer to your driver object.
     device    - A pointer to the device object.
     interrupt - Interrupt structure to remove.


Result
~~~~~~
::

     None.



See also
~~~~~~~~

`moHidd_PCIDriver_AddInterrupt`_ 

