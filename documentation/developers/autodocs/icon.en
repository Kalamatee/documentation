====
icon
====

.. This document is automatically generated. Don't edit it!

`Index <index>`_

----------

======================================= ======================================= ======================================= ======================================= 
`AddFreeList`_                          `BumpRevision`_                         `ChangeToSelectedIconColor`_            `DeleteDiskObject`_                     
`DrawIconStateA`_                       `DupDiskObjectA`_                       `FindToolType`_                         `FreeDiskObject`_                       
`FreeFreeList`_                         `GetDefDiskObject`_                     `GetDiskObject`_                        `GetDiskObjectNew`_                     
`GetIconRectangleA`_                    `GetIconTagList`_                       `IconControlA`_                         `LayoutIconA`_                          
`MatchToolValue`_                       `NewDiskObject`_                        `PutDefDiskObject`_                     `PutDiskObject`_                        
`PutIconTagList`_                       
======================================= ======================================= ======================================= ======================================= 

-----------

AddFreeList
===========

Synopsis
~~~~~~~~
::

 BOOL AddFreeList(
          struct FreeList * freelist,
          APTR mem,
          unsigned long size );

Function
~~~~~~~~
::

     Adds supplied memory chunk to the supplied freelist.
     All memory added in to the freelist can later be deallocated through
     one single FreeFreeList() call.


Inputs
~~~~~~
::

     freelist - pointer to freelist struct previously allocated by
             the programmer.
     mem - memory to add to the freelist.
     size - size of memory chunk to add to the frelist.


Result
~~~~~~
::

     FALSE on failure, else TRUE.


See also
~~~~~~~~
::

     FreeFreeList()



BumpRevision
============

Synopsis
~~~~~~~~
::

 UBYTE * BumpRevision(
          UBYTE * newname,
          UBYTE * oldname );

Function
~~~~~~~~
::

     Computes the right copy revision for a file name.


Inputs
~~~~~~
::

     newname  -  a buffer for the new string. Should be at leas 31 bytes.
     oldname  -  the old name to be revisioned.


Result
~~~~~~
::

     pointer to the supplied buffer.o



ChangeToSelectedIconColor
=========================

Synopsis
~~~~~~~~
::

 VOID ChangeToSelectedIconColor(
          struct ColorRegister * cr );


DeleteDiskObject
================

Synopsis
~~~~~~~~
::

 BOOL DeleteDiskObject(
          UBYTE * name );

Function
~~~~~~~~
::

     Deletes an icon description file.


Inputs
~~~~~~
::

     name  -  name of the icon file without the ".info".


Bugs
~~~~
::

     Does not yet notify workbench about the deletion.



DrawIconStateA
==============

Synopsis
~~~~~~~~
::

 void DrawIconStateA(
          struct RastPort * rp,
          struct DiskObject * icon,
          STRPTR label,
          LONG leftEdge,
          LONG topEdge,
          ULONG state,
          struct TagItem * tags );

See also
~~~~~~~~
::

     AddFreeList()



DupDiskObjectA
==============

Synopsis
~~~~~~~~
::

 struct DiskObject * DupDiskObjectA(
          struct DiskObject * icon,
          struct TagItem * tags );


FindToolType
============

Synopsis
~~~~~~~~
::

 UBYTE * FindToolType(
          CONST STRPTR * toolTypeArray,
          CONST STRPTR typeName );

Function
~~~~~~~~
::

     Finds the supplied typeName inside the given toolTypeArray.


Inputs
~~~~~~
::

     toolTypeArray  -  pointer to an array of tooltype strings.
     typeName      -  name of a specific tool-type.


Result
~~~~~~
::

     NULL if the tooltype wasn't found and a pointer to the value
     of the tooltype otherwise.


See also
~~~~~~~~
::

     MatchToolValue()



FreeDiskObject
==============

Synopsis
~~~~~~~~
::

 void FreeDiskObject(
          struct DiskObject * diskobj );

Function
~~~~~~~~
::

     Frees all memory for a DiskObject structure.
     

Inputs
~~~~~~
::

     diskobj --  a pointer to a DiskObject structure. A NULL pointer will be
                 ignored.
     

See also
~~~~~~~~
::

     GetDiskObject()
     


FreeFreeList
============

Synopsis
~~~~~~~~
::

 void FreeFreeList(
          struct FreeList * freelist );

Function
~~~~~~~~
::

     Frees all memory chunks in the freelist (previously inserted into
     it via AddFreeList()).


Inputs
~~~~~~
::

     freelist  - pointer to FreeList struct. It is save to use NULL.


See also
~~~~~~~~
::

     AddFreeList()



GetDefDiskObject
================

Synopsis
~~~~~~~~
::

 struct DiskObject * GetDefDiskObject(
          LONG type );

Function
~~~~~~~~
::

     Gets the default icon for the supplied type of icon.


Inputs
~~~~~~
::

     type  -  type of icon to get default diskobject for.



Result
~~~~~~
::

     DiskObject structure or NULL if an error occured. The error may
     be obtained by IoErr().


See also
~~~~~~~~
::

     PutDefDiskObject(), GetDiskObjectNew()



GetDiskObject
=============

Synopsis
~~~~~~~~
::

 struct DiskObject * GetDiskObject(
          CONST_STRPTR name );


GetDiskObjectNew
================

Synopsis
~~~~~~~~
::

 struct DiskObject * GetDiskObjectNew(
          CONST_STRPTR name );

Function
~~~~~~~~
::

     Tries to open the supplied info file via GetDiskObject(). If this
     not succeeds it will try to read the default info file for
     that type of file.


Inputs
~~~~~~
::

     name - name of the file to read an icon for.


Result
~~~~~~
::

     DiskObject - pointer ta diskobject struct.


See also
~~~~~~~~
::

     GetDiskObject(), GetDefDiskObject()



GetIconRectangleA
=================

Synopsis
~~~~~~~~
::

 BOOL GetIconRectangleA(
          struct RastPort * rp,
          struct DiskObject * icon,
          STRPTR label,
          struct Rectangle * rectangle,
          struct TagItem * tags );


GetIconTagList
==============

Synopsis
~~~~~~~~
::

 struct DiskObject * GetIconTagList(
          CONST_STRPTR name,
          const struct TagItem * tags );

Inputs
~~~~~~
::


 TAGS
     ICONA_ErrorCode (LONG *)
     ICONGETA_GetDefaultType (LONG) - Default icon type to get. This
             overrides the "name" paramter.
     ICONGETA_GetDefaultName (STRPTR) - Name of default icon to get. This
             overrides the "name" paramter.
     ICONGETA_FailIfUnavailable (BOOL)
     ICONGETA_GetPaletteMappedIcon (BOOL)
     ICONGETA_IsDefaultIcon (LONG *) - Upon completion of this function, the
         referenced LONG will be set to a boolean value indicating whether
         the returned icon is a default icon.
     ICONGETA_RemapIcon (BOOL)
     ICONGETA_GenerateImageMasks (BOOL)
     ICONGETA_Label (STRPTR)
     ICONGETA_Screen (struct Screen *)



IconControlA
============

Synopsis
~~~~~~~~
::

 ULONG IconControlA(
          struct DiskObject * icon,
          struct TagItem * tags );


LayoutIconA
===========

Synopsis
~~~~~~~~
::

 BOOL LayoutIconA(
          struct DiskObject * icon,
          struct Screen * screen,
          struct TagItem * tags );


MatchToolValue
==============

Synopsis
~~~~~~~~
::

 BOOL MatchToolValue(
          UBYTE * typeString,
          UBYTE * value );

Function
~~~~~~~~
::

     Checks if the given tooltype has the supplied value.


Inputs
~~~~~~
::

     typeString - string containing the tooltype.
     value - the value to match for.


Result
~~~~~~
::

     TRUE if match, else FALSE.



NewDiskObject
=============

Synopsis
~~~~~~~~
::

 struct DiskObject * NewDiskObject(
          ULONG type );


PutDefDiskObject
================

Synopsis
~~~~~~~~
::

 BOOL PutDefDiskObject(
          struct DiskObject * icon );

Function
~~~~~~~~
::

     Puts a new default icon for a certain type.


Inputs
~~~~~~
::

     diskObject  - diskObject struct describing icon to put as new
                   default icon.


Result
~~~~~~
::

     TRUE if success, else FALSE. Error may be obtained via IoErr().


See also
~~~~~~~~
::

     GetDefDiskObject(), PutDiskObject()



PutDiskObject
=============

Synopsis
~~~~~~~~
::

 BOOL PutDiskObject(
          CONST_STRPTR name,
          struct DiskObject * icon );


PutIconTagList
==============

Synopsis
~~~~~~~~
::

 BOOL PutIconTagList(
          CONST_STRPTR name,
          struct DiskObject * icon,
          struct TagItem * tags );


