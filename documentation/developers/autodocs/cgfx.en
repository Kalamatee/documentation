====
cgfx
====

.. This document is automatically generated. Don't edit it!

`Index <index>`_

----------

======================================= ======================================= ======================================= ======================================= 
`AllocCModeListTagList()`_              `BestCModeIDTagList()`_                 `BltTemplateAlpha()`_                   `CModeRequestTagList()`_                
`CVideoCtrlTagList()`_                  `DoCDrawMethodTagList()`_               `ExtractColor()`_                       `FillPixelArray()`_                     
`FreeCModeList()`_                      `GetCyberIDAttr()`_                     `GetCyberMapAttr()`_                    `InvertPixelArray()`_                   
`IsCyberModeID()`_                      `LockBitMapTagList()`_                  `MovePixelArray()`_                     `ReadPixelArray()`_                     
`ReadRGBPixel()`_                       `ScalePixelArray()`_                    `UnLockBitMap()`_                       `UnLockBitMapTagList()`_                
`WriteLUTPixelArray()`_                 `WritePixelArray()`_                    `WritePixelArrayAlpha()`_               `WriteRGBPixel()`_                      

======================================= ======================================= ======================================= ======================================= 

-----------

AllocCModeListTagList()
=======================

Synopsis
~~~~~~~~
::

 struct List * AllocCModeListTagList(
          struct TagItem * tags );
 
 struct List * AllocCModeListTags(
          TAG tag, ... );


----------

BestCModeIDTagList()
====================

Synopsis
~~~~~~~~
::

 ULONG BestCModeIDTagList(
          struct TagItem * tags );
 
 ULONG BestCModeIDTags(
          TAG tag, ... );

Function
~~~~~~~~
::

     Finds best RTG display mode ID which matches parameters specified
     by the taglist.


Inputs
~~~~~~
::

     tags - An optional pointer to a TagList containint requirements
            for the display mode. Valid tags are:

       CYBRBIDTG_Depth (ULONG) - depth the returned ModeID must support.
                                 Defaults to 8.
       CYBRBIDTG_NominalWidth  (UWORD),
       CYBRBIDTG_NominalHeight (UWORD) - desired width and height for the
                                         display mode.
       CYBRBIDTG_MonitorID (ULONG) - Specify numeric driver ID to find only
                                     modes belonging to this driver. Useful
                                     for systems with several graphics cards.
                                     Defined board IDs are:
                                       1 - CVision64
                                       2 - Piccolo
                                       3 - PicassoII
                                       4 - Spectrum
                                       5 - Domino
                                       6 - RetinaZ3
                                       7 - PiccoSD64
                                       8 - A2410
                                      13 - CVision3D (V41)
                                      14 - Inferno   (V41)
                                      15 - PicassoIV (V41)
                                     Note that this tag exists only for
                                     compatibility with old software. New
                                     programs should use CYBRIDTG_BoardName
                                     tag instead.
     CYBRBIDTG_BoardName (STRPTR) - Specify the driver name directly. For
                                    example, pass "CVision3D" to get a
                                    CyberVision64/3D display mode ID


Result
~~~~~~
::

     Best matchind display mode ID or INVALID_ID if there is no match



See also
~~~~~~~~

`graphics.library/BestModeIDA() <./graphics#bestmodeida>`_ 

----------

BltTemplateAlpha()
==================

Synopsis
~~~~~~~~
::

 void BltTemplateAlpha(
          APTR src,
          LONG srcx,
          LONG srcmod,
          struct RastPort * rp,
          LONG destx,
          LONG desty,
          LONG width,
          LONG height );


----------

CModeRequestTagList()
=====================

Synopsis
~~~~~~~~
::

 ULONG CModeRequestTagList(
          APTR ,
          struct TagItem *  );
 
 ULONG CModeRequestTags(
          APTR ,
          TAG tag, ... );


----------

CVideoCtrlTagList()
===================

Synopsis
~~~~~~~~
::

 void CVideoCtrlTagList(
          struct ViewPort * vp,
          struct TagItem  * tags );
 
 void CVideoCtrlTags(
          struct ViewPort * vp,
          TAG tag, ... );


----------

DoCDrawMethodTagList()
======================

Synopsis
~~~~~~~~
::

 void DoCDrawMethodTagList(
          struct Hook     * hook,
          struct RastPort * rp,
          struct TagItem  * tags );
 
 void DoCDrawMethodTags(
          struct Hook     * hook,
          struct RastPort * rp,
          TAG tag, ... );


----------

ExtractColor()
==============

Synopsis
~~~~~~~~
::

 ULONG ExtractColor(
          struct RastPort * RastPort,
          struct BitMap   * SingleMap,
          ULONG Colour,
          ULONG sX,
          ULONG sY,
          ULONG Width,
          ULONG Height );


----------

FillPixelArray()
================

Synopsis
~~~~~~~~
::

 ULONG FillPixelArray(
          struct RastPort * rp,
          UWORD destx,
          UWORD desty,
          UWORD width,
          UWORD height,
          ULONG pixel );


----------

FreeCModeList()
===============

Synopsis
~~~~~~~~
::

 void FreeCModeList(
          struct List * modeList );


----------

GetCyberIDAttr()
================

Synopsis
~~~~~~~~
::

 ULONG GetCyberIDAttr(
          ULONG attribute,
          ULONG DisplayModeID );


----------

GetCyberMapAttr()
=================

Synopsis
~~~~~~~~
::

 ULONG GetCyberMapAttr(
          struct BitMap * bitMap,
          ULONG attribute );


----------

InvertPixelArray()
==================

Synopsis
~~~~~~~~
::

 ULONG InvertPixelArray(
          struct RastPort * rp,
          UWORD destx,
          UWORD desty,
          UWORD width,
          UWORD height );


----------

IsCyberModeID()
===============

Synopsis
~~~~~~~~
::

 BOOL IsCyberModeID(
          ULONG modeID );

Function
~~~~~~~~
::

     Check if the given display mode ID belongs to an RTG driver


Inputs
~~~~~~
::

     modeID - a display mode ID to check


Result
~~~~~~
::

     TRUE if the mode belongs to an RTG driver, FALSE otherwise



----------

LockBitMapTagList()
===================

Synopsis
~~~~~~~~
::

 APTR LockBitMapTagList(
          APTR bitmap,
          struct TagItem * tags );
 
 APTR LockBitMapTags(
          APTR bitmap,
          TAG tag, ... );


----------

MovePixelArray()
================

Synopsis
~~~~~~~~
::

 ULONG MovePixelArray(
          UWORD SrcX,
          UWORD SrcY,
          struct RastPort * RastPort,
          UWORD DstX,
          UWORD DstY,
          UWORD SizeX,
          UWORD SizeY );


----------

ReadPixelArray()
================

Synopsis
~~~~~~~~
::

 ULONG ReadPixelArray(
          APTR dst,
          UWORD destx,
          UWORD desty,
          UWORD dstmod,
          struct RastPort * rp,
          UWORD srcx,
          UWORD srcy,
          UWORD width,
          UWORD height,
          UBYTE dstformat );


----------

ReadRGBPixel()
==============

Synopsis
~~~~~~~~
::

 ULONG ReadRGBPixel(
          struct RastPort * rp,
          UWORD x,
          UWORD y );


----------

ScalePixelArray()
=================

Synopsis
~~~~~~~~
::

 LONG ScalePixelArray(
          APTR srcRect,
          UWORD SrcW,
          UWORD SrcH,
          UWORD SrcMod,
          struct RastPort * RastPort,
          UWORD DestX,
          UWORD DestY,
          UWORD DestW,
          UWORD DestH,
          UBYTE SrcFormat );


----------

UnLockBitMap()
==============

Synopsis
~~~~~~~~
::

 void UnLockBitMap(
          APTR Handle );


----------

UnLockBitMapTagList()
=====================

Synopsis
~~~~~~~~
::

 void UnLockBitMapTagList(
          APTR Handle,
          struct TagItem * Tags );
 
 void UnLockBitMapTags(
          APTR Handle,
          TAG tag, ... );


----------

WriteLUTPixelArray()
====================

Synopsis
~~~~~~~~
::

 LONG WriteLUTPixelArray(
          APTR srcRect,
          UWORD SrcX,
          UWORD SrcY,
          UWORD SrcMod,
          struct RastPort * rp,
          APTR CTable,
          UWORD DestX,
          UWORD DestY,
          UWORD SizeX,
          UWORD SizeY,
          UBYTE CTabFormat );


----------

WritePixelArray()
=================

Synopsis
~~~~~~~~
::

 ULONG WritePixelArray(
          APTR src,
          UWORD srcx,
          UWORD srcy,
          UWORD srcmod,
          struct RastPort * rp,
          UWORD destx,
          UWORD desty,
          UWORD width,
          UWORD height,
          UBYTE srcformat );


----------

WritePixelArrayAlpha()
======================

Synopsis
~~~~~~~~
::

 ULONG WritePixelArrayAlpha(
          APTR src,
          UWORD srcx,
          UWORD srcy,
          UWORD srcmod,
          struct RastPort * rp,
          UWORD destx,
          UWORD desty,
          UWORD width,
          UWORD height,
          ULONG globalalpha );


----------

WriteRGBPixel()
===============

Synopsis
~~~~~~~~
::

 LONG WriteRGBPixel(
          struct RastPort * rp,
          UWORD x,
          UWORD y,
          ULONG pixel );


