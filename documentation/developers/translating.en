===========
Translating
===========

:Authors:   William Ouwehand, 
:Copyright: Copyright Š 1995-2007, The AROS Development Team
:Version:   $Revision$
:Date:      $Date$
:Status:    Work in progress.

.. Warning:: 
    
    Page almost finished.    


.. Contents::


Introduction
------------
Translating the OS or website helps AROS reach more people internationally, and
help making using the OS easier. Making estimates is impossible, but one cannot deny 
that there is a potentially huge user base who are unable to speak, read or write 
English. Reaching out to those people can *possibly* help get more users and developers alike. 
For this purpose we are still actively looking for new translators.

So far AROS has only been translated in a few languages, and that 
only partially. The very few translators available and the amount of work are one of the causes.
Also, most of our translators are (core) developers; taking over their tasks (partially) 
will also allow them to maximize their efforts on coding or writing new documentation. 
So should you be interested in helping us out, please `contact us`__. Even the least effort
can help us substantially.

__ http://aros.sourceforge.net/contact.php#mailing-lists

Where to start
--------------
Translating is as basic as it implicates. All you need to start translating with 
AROS is a suitable text-editor, access to the AROS 'SVN sources' and a feel for 
your language and grammar. Information about the first two can be found here on 
the `SVN pages <svn>`_, the latter is up to you of course.

The work itself then divides into the website (news/documentation) and 
localizing the AR(OS) operating system. The website has higher priority here
as it's the first thing new users will encounter with AROS. The site also carries 
documentation like how to install or extend AROS. This information is also duplicated 
in the OS documentation.Localizing the OS is no less important, but that can always 
happen later. Besides, the most basic site translation concerns just 10 to 15 not-too-large pages, 
making it not such a big job anyways.


Translating the website
=======================
The website is AROS' official online presence. It carries general information 
about AROS, news, downloads (OS) and the user and developer guides. It 
plays an important role in informing people about AROS, and serving as a 
reference guide for both users and developers. Even a simply translation of the 
introductions and news can let us inform more people about AROS. 

The site itself is quite extensive, roughly 100+ pages large. Ease up, not all 
of this needs to be translated! Some parts are less important, others not 
finished and other parts yet are quite outdated anyways. So for your own ease, 
limit yourself to the primary pages first ('level 1') of the 
site. That means foremost the user documentation, then all the other main site pages including
news. The developer section is less important - with exeption of a few pages like the SVN 
instructions and contribute pages. Generally the developers speak English well, 
making it not necessary. It are foremost the users that need the extra attention and aid.

As of early 2007, that especially the User documentation is still under heavy development. 
Changes tend to be made frequently to these parts. Some parts are outdated, others are not (yet) 
worthwhile. As noted earlier, this also applies to a lot of other 'deeper' pages. 
If in doubt, ask us.

Procedure
~~~~~~~~~
After you've familiarized yourself with `SVN here <svn>`_, and have SVN access, 
perform a checkout of the website sources via:: 

  https://svn.aros.org:8080/svn/aros/trunk/documentation/

You local repository now contains all the files of the website, including some 
extra's.

Browsing your local copy you will notice the many different language extensions 
behind files. Each extension corresponds to a specific language, and as you can 
guess the same needs to happen for your language. Simply pick an existing page 
(English preferred), duplicate the file in the same drawer, add the correct 
extension, e.g. contribute.en (English) -> contribute.nl (Dutch) and translate 
the page. When satisfied with the result, commit the file to the repository. 
Please use typical logmessages like "German translations" or "updated German X page" 
and try to bundle more than 1 file into a commit. 

English files should count as 'default' for all pages, and are usually 
the most up-to-date. For all pages you haven't translated the site will revert 
to the English versions.

Checking your work
~~~~~~~~~~~~~~~~~~
Checking your texts is advised on two points: spelling and markup errors. 

Spellchecks should be considered obligatory, optionally re-reading your work can 
help. These combined should catch 99% of spelling and grammar errors, and both 
involve only a little overhead. We won't complain, but correct language 
use does add to the representativeness of the site. And some users *do* consider 
these details.

Markup errors are mistakes made in tags or links in the document source. When 
present, they create a 'broken' page filled with an error messages explaining 
what's gone wrong. When committing broken files to the repository, the server 
will 'notice' the faults and automatically report these errors to the developer 
Mailing List. You can then either check that list and fix the problem, or wait 
until one of the other developers corrects the error. 
To save them the work, we strongly encourage that you build the 
documentation first locally before committing, checking and fixing any reported problems 
yourself. 'Building' the site is an automated process. It basically 
takes the source texts and converts them into HTML/PHP pages suitable for 
display on the site. For a how-to on building documentation yourself, refer to 
the `documenting page <documenting>`_, section building. It is not very complicated.

After committing, the new texts should show up in a few hours (at maximum a day) 
on the website. 

Localizing AROS or applications
===============================
Localizing the OS and it's applications adds much to the usability and experience
of non-English speaking users, maybe even making AROS usable for them in the first place.
The procedure for localizing the OS is basically the same, but differs in the details. 
As with the website even a basic translation suffices, encompassing the Workbench and
it's applications/utilities. These make a good start/base for further localisations. 
You can later always progress to the extra OS applications and contributed files. 

Procedure
~~~~~~~~~

The OS and applications use so-called catalog files, containing translated 
versions of the text used in an application. Such are texts from requesters,
about dialogs, and so on. Each piece of text is called a 'string' in 
programming 'jargon'. AROS like AmigaOS offers the option of storing an application's 
strings separately, allowing easy and efficient localization.

The catalog files for AROS are located within the main code repository, different from 
the website files. You can perfrom either a complete SVN checkout, or browse the 
SVN repository trough your browser and download specific files. 
By browser use this link https://svn.aros.org:8080/svn/aros/trunk/AROS. 
Perform a SVN checkout by::

  https://svn.aros.org:8080/svn/aros/trunk/AROS

Note the SVN checkout is quite large (200MB) and time consuming. 
Do also not get intimidated by the mere size of the repository: you 
only need to focus on a fraction of these files, luckily :-). Now get ready
for the real work. If confused, don't hesitate to ask for help.

First, you must check for your country in Locale/Countries and 
language definition file in Locale/Languages. Most languages are added already BTW. 
If you can`t find anything like <your_language>.c there then you must create
it. Try to avoid the special characters in the name of the file, this 
can help prevent problems with some non-utf programs (remember, AROS is meant 
to be portable). You can look for most complete lang.c file and copy it to 
your_lang.c. Then, open the file in the editor and translate all the text strings 
you need. This includes usual units like days, months, currency etc. You can 
find tables with descriptions of chars in these files (collation tables), you 
can skip them fot the first time. After compiling, your locale must appear in 
list of locales of Locale Pref.

What`s next ? If your language uses non-ISO fonts, you`d
need them. Search in the Internet for open-sourced Amiga bitmap or True Type
Fonts, which can be included to the system. Put them to the /Fonts or 
/Fonts/Truetype and fix the mmakefile (be **careful** with mmakefiles!)

Now comes the actual translating work. Know that localizing in AROS is done similar 
to the AmigaOS. This means you can find some .cd and .ct files along with the code 
(usually in Catalog drawer). <name>.CD Files 
contains catalog definitions and shouldn`t be touched unless you know you changed 
the program itself. The .CT files contains all the translated strings, and are the 
object of your work. Browse the SVN Tree for these files and translate them: find
the most recent <name>.ct file (look for version and date in header), copy
to <your_lang>.ct (much easier to translate than from <lang>.CD file) and edit 
it. Try to put the words in correct times, which will require you check where 
they are used. 

Checking your work
~~~~~~~~~~~~~~~~~~
To test your changes, you can submit them to the SVN server or 
compile locally with flexcat tool, copy to AROS and check the involved application. 
Again, perform prior spellchecks and re-read texts as mentioned.


Maintenance
-----------
As with everything, information tends to get updated frequently, requiring 
subsequent synchronization of all translations. It's not a thankful job (except 
from a endusers POV), but a necessary one. The frequency of this is up to you. 

Tracking changes is made easy by the SVN changelogs, available trough your 
SVN client. This list displays *all* changes ever made to the repository. Judge 
from the logmessages and changed files if the concerned change is relevant. 
Comparing and synchronizing documents can be a somewhat cumbersome. Some text-editors 
offer an 'synchronized window scrolling' option, which can be a great help when 
comparing two pages against each other. Not fully perfect, but close to.